---
// src/layouts/Layout.astro
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import '../styles/tailwind.css';

interface Props {
    title: string;
    description?: string;
    image?: string;
    frontmatter?: {
        hasKatex?: boolean;
        [key: string]: any;
    };
}

const {
    title,
    description = 'Elektronik ve Yazılım Projelerimi sergilediğim kişisel web sitem.',
    image,
    frontmatter
} = Astro.props;

const siteName = 'Gulderen Lab';
const formattedTitle = `${title} | ${siteName}`;
const canonicalURL = Astro.site ? new URL(Astro.url.pathname, Astro.site) : undefined;
const ogImageURL = image && Astro.site ? new URL(image, Astro.site).toString() : undefined;

if (!Astro.site && import.meta.env.PROD) {
    console.warn(
        `Astro.site yapılandırması astro.config.mjs dosyasında tanımlanmamış. Canonical ve OG URL'ler düzgün oluşturulamayacak.`
    );
}

const hasKatex = frontmatter?.hasKatex ?? true;
---

<!doctype html>
<html lang="tr" class="scroll-smooth">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
        <meta name="generator" content={Astro.generator} />

        {hasKatex && (
             <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css" integrity="sha384-n8MVd4RsNIU0KOVEMeaOVTGsevlteEUFlYfls8ERc8iOPBQAP+D0zwVT4quSfli'" crossorigin="anonymous" />
        )}
        
        <script type="module" src="https://unpkg.com/@google/model-viewer/dist/model-viewer.min.js" defer></script>

        <title>{formattedTitle}</title>
        <meta name="description" content={description} />
        {canonicalURL && <link rel="canonical" href={canonicalURL.toString()} />}
        <meta property="og:title" content={formattedTitle} />
        <meta property="og:description" content={description} />
        {canonicalURL && <meta property="og:url" content={canonicalURL.toString()} />}
        {ogImageURL && <meta property="og:image" content={ogImageURL} />}
        <meta property="og:type" content="website" />
        <meta property="og:site_name" content={siteName} />
        <meta property="og:locale" content="tr_TR" />

        <style is:inline>
            pre > button.copy-button { position: absolute; top: 0.5rem; right: 0.5rem; padding: 0.25rem 0.5rem; background-color: #4a5568; color: #e2e8f0; border: none; border-radius: 0.25rem; font-size: 0.75rem; font-family: inherit; line-height: 1; cursor: pointer; opacity: 0; visibility: hidden; transition: opacity 0.2s ease-in-out, visibility 0.2s ease-in-out, background-color 0.2s ease-in-out; z-index: 10; }
            pre:hover > button.copy-button { opacity: 0.7; visibility: visible; }
            pre > button.copy-button:hover { background-color: #2d3748; opacity: 1; }
            pre > button.copy-button.copied { background-color: #38a169; color: white; opacity: 1; visibility: visible; }
            pre > button.copy-button:focus { outline: none; }
            pre { position: relative; }
            .model-container { position: relative; border: 1px solid #cbd5e1; border-radius: 0.5rem; overflow: hidden; background-color: white; }
            .model-container model-viewer { width: 100%; height: 100%; --scene-background: white; }
            .model-container .progress-bar { display: block; width: 100%; height: 100%; position: absolute; top: 0; left: 0; background-color: rgba(229, 231, 235, 0.8); display: flex; justify-content: center; align-items: center; pointer-events: none; }
            .model-container .progress-bar > .update-bar { background-color: #4299e1; width: 0%; height: 5px; position: absolute; bottom: 20px; left: 50%; transform: translateX(-50%); transition: width 0.3s ease-out; border-radius: 2.5px; }
            model-viewer:not([loaded]) > div[slot="progress-bar"] { opacity: 1; }
            model-viewer[loaded] > div[slot="progress-bar"] { opacity: 0; transition: opacity 0.5s 0.5s ease-out; }

            /* YENİ EKLENEN KISIM: Başlıkların alt çizgisini kaldırır */
            .prose h1,
            .prose h2,
            .prose h3,
            .prose h4,
            .prose h5,
            .prose h6 {
                text-decoration: none;
            }
        </style>
    </head>
    <body class="bg-gray-900 text-gray-200 flex flex-col min-h-screen font-sans">
        <Header siteTitle={siteName} />
        
        <main class="flex-grow w-full container mx-auto px-4 py-8">
            <article class="prose prose-invert max-w-none">
                <slot />
            </article>
        </main>
        
        <Footer />

        <script is:inline>
            function addCopyButtons() {
                document.querySelectorAll('pre:has(code)').forEach((block) => {
                    if (block.querySelector('button.copy-button')) return;
                    if (window.getComputedStyle(block).position === 'static') {
                     	block.style.position = 'relative';
                    }
                    const copyButton = document.createElement('button');
                    copyButton.className = 'copy-button';
                    copyButton.textContent = 'Kopyala';
                    copyButton.setAttribute('aria-label', 'Kodu kopyala');
                    copyButton.type = 'button';
                    block.appendChild(copyButton);
                    copyButton.addEventListener('click', async () => {
                        const codeElement = block.querySelector('code');
                        const codeToCopy = codeElement ? codeElement.textContent : '';
                        if (codeToCopy && navigator.clipboard) {
                            try {
                                await navigator.clipboard.writeText(codeToCopy);
                                copyButton.textContent = 'Kopyalandı!';
                                copyButton.classList.add('copied');
                                copyButton.setAttribute('aria-label', 'Kod kopyalandı');
                                setTimeout(() => {
                                    copyButton.textContent = 'Kopyala';
                                    copyButton.classList.remove('copied');
                                    copyButton.setAttribute('aria-label', 'Kodu kopyala');
                                }, 2000);
                            } catch (err) {
                                console.error('Kod kopyalanamadı:', err);
                                copyButton.textContent = 'Hata';
                                setTimeout(() => {
                                    copyButton.textContent = 'Kopyala';
                                    copyButton.setAttribute('aria-label', 'Kodu kopyala');
                                }, 2000);
                            }
                        } else {
                            console.warn('Pano API desteklenmiyor veya kopyalanacak kod bulunamadı.');
                            copyButton.textContent = 'Hata!';
                            copyButton.disabled = true;
                            setTimeout(() => {
                                copyButton.textContent = 'Kopyala';
                                copyButton.disabled = false;
                                copyButton.setAttribute('aria-label', 'Kodu kopyala');
                            }, 2000);
                        }
                    });
                });
            }
            
            const initCopyButtons = () => {
                document.querySelectorAll('pre > button.copy-button').forEach(btn => btn.remove());
                addCopyButtons();
            };

            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', initCopyButtons);
            } else {
                initCopyButtons();
            }

            document.addEventListener('astro:after-swap', initCopyButtons);
        </script>
    </body>
</html>